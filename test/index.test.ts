import { describe, expect, it } from 'vitest';
import { generateRoutesFunction } from '../src/routeManifest';
import { cleanPath } from '../src/utils';

// Example usage
const routes = [
  '/',
  '/about',
  '/auth/test',
  '/posts/:slug',
  '/multiple/:id/edit',
  '/multiple/:first/:second/:third',
  '/multiple/:first/:second/z',
  '/multiple/:first',
  '/(abc)xyz/(indexPlaceholder)',
];

const JSOutputReference = `/* eslint-disable */
// ################################################
// ### THIS FILE IS AUTOGENERATED - DO NOT EDIT ###
// ################################################
export function routes(searchParams) {
  const query = searchParams ? '?' + new URLSearchParams(searchParams).toString() : '';
  return {
    index: \`/\${query}\` ,
    about: {index: \`/about\${query}\`},
    auth: {
      test: {index: \`/auth/test\${query}\`},
    },
    posts: {
      slug: (slug) => ({index: \`/posts/\${slug}\${query}\`}),
    },
    multiple: {
      id: (id) => ({
        edit: {index: \`/multiple/\${id}/edit\${query}\`},
      }),
      first: (first) => ({
        index: \`/multiple/\${first}\${query}\`,
        second: (second) => ({
          third: (third) => ({index: \`/multiple/\${first}/\${second}/\${third}\${query}\`}),
          z: {index: \`/multiple/\${first}/\${second}/z\${query}\`},
        }),
      }),
    },
    xyz: {index: \`/xyz\${query}\`},
  };
}`;

const DTSOutputReference = `// ################################################
// ### THIS FILE IS AUTOGENERATED - DO NOT EDIT ###
// ################################################
export declare function routes(searchParams?:Record<string, string>):{
    index: string;
    about: {index: string};
    auth: {
      test: {index: string};
    };
    posts: {
      slug: (slug:string|number) => ({index: string});
    };
    multiple: {
      id: (id:string|number) => ({
        edit: {index: string};
      });
      first: (first:string|number) => ({
        index: string;
        second: (second:string|number) => ({
          third: (third:string|number) => ({index: string});
          z: {index: string};
        });
      });
    };
    xyz: {index: string};
};`;

/**
 * TESTS
 */

describe('Test generateRoutesFunction', async () => {
  const [JSOutput, typeDeclaration] = await generateRoutesFunction(routes.map(cleanPath));
  it('File text is equal to JSOutputReference', () => {
    expect(JSOutput).toBe(JSOutputReference);
  });

  it('File text is equal to typeDeclarationReference', () => {
    expect(typeDeclaration).toBe(DTSOutputReference);
  });
});
